"""
Contract test for program structure detection (header/footer).
This test MUST FAIL initially as program structure detection is not yet implemented.
"""

import unittest
import sys
import os

# Add parent directory to path for imports
ROOT = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
if ROOT not in sys.path:
    sys.path.insert(0, ROOT)

from app.gcode_parser import parse_gcode


class TestProgramStructureDetection(unittest.TestCase):
    """Test that program structure (header/footer) is properly detected and parsed."""

    def test_program_header_detection(self):
        """Program headers should be detected and parsed."""
        code = """; Generated by CAM Software v1.0
; Material: Aluminum 
; Tool: 6mm End Mill
; Date: 2024-01-15
G21 (mm)
G90 (absolute)
G1 X10 Y10 F100"""
        result = parse_gcode(code)

        # Should have program structure information
        self.assertIn("program_info", result, "Should detect program information")
        program_info = result["program_info"]

        # Should detect header
        self.assertIn("header", program_info, "Should detect program header")
        header = program_info["header"]

        self.assertIn("comments", header, "Header should contain comments")
        comments = header["comments"]
        self.assertGreater(len(comments), 0, "Should have header comments")

        # Should extract meaningful information from comments
        comment_text = " ".join(comments).lower()
        self.assertIn("cam software", comment_text, "Should capture CAM software info")
        self.assertIn("aluminum", comment_text, "Should capture material info")
        self.assertIn("6mm end mill", comment_text, "Should capture tool info")

    def test_program_footer_detection(self):
        """Program footers should be detected and parsed."""
        code = """G1 X10 Y10 F100
G0 Z50 (retract)
M5 (spindle stop)
G0 X0 Y0 (return to origin)
M30 (program end)
; End of program
; Runtime: 00:15:30"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        # Should detect footer
        if "footer" in program_info:
            footer = program_info["footer"]
            self.assertIn("commands", footer, "Footer should contain cleanup commands")
            self.assertIn("comments", footer, "Footer should contain end comments")

    def test_program_without_header_footer(self):
        """Programs without clear header/footer should be handled gracefully."""
        code = """G1 X10 Y10 F100
G1 X20 Y20"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        # May or may not detect structure, but should not cause errors
        self.assertIsInstance(program_info, dict, "Program info should be dictionary")

        # If no header/footer detected, should indicate this
        if "header" in program_info:
            header = program_info["header"]
            self.assertIn("detected", header, "Should indicate if header was detected")

        if "footer" in program_info:
            footer = program_info["footer"]
            self.assertIn("detected", footer, "Should indicate if footer was detected")

    def test_mixed_comments_and_code(self):
        """Mixed comments throughout code should be properly categorized."""
        code = """; Program start
G21 G90
; Setup complete
G1 X10 Y10 F100
; Moving to position 2
G1 X20 Y20
; Final move
M30"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        if "structure" in program_info:
            structure = program_info["structure"]

            # Should categorize comments by location
            self.assertIn("inline_comments", structure, "Should detect inline comments")
            inline_comments = structure["inline_comments"]
            self.assertGreater(len(inline_comments), 0, "Should have inline comments")

            # Each comment should have location info
            for comment in inline_comments:
                self.assertIn("line_no", comment, "Comment should have line number")
                self.assertIn("text", comment, "Comment should have text content")

    def test_program_metadata_extraction(self):
        """Common metadata patterns should be extracted from comments."""
        code = """; Tool: T01 - 6mm End Mill
; Spindle Speed: 8000 RPM  
; Feed Rate: 800 mm/min
; Cut Depth: 2mm
; Material: Aluminum 6061
; Estimated Time: 15 minutes
G21 G90
G1 X10 Y10 F800"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        if "metadata" in program_info:
            metadata = program_info["metadata"]

            # Should extract common metadata fields
            expected_fields = [
                "tool",
                "spindle_speed",
                "feed_rate",
                "material",
                "estimated_time",
            ]

            for field in expected_fields:
                if field in metadata:
                    self.assertIsInstance(
                        metadata[field], str, f"Metadata {field} should be string"
                    )
                    self.assertGreater(
                        len(metadata[field]), 0, f"Metadata {field} should not be empty"
                    )

    def test_subroutine_detection(self):
        """Subroutines and program calls should be detected."""
        code = """O100 SUB (subroutine definition)
G1 X10 Y10 F100
M99 (return)
O200 (main program)
M98 P100 (call subroutine)
M30"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        if "subroutines" in program_info:
            subroutines = program_info["subroutines"]

            # Should detect subroutine definitions
            self.assertIn(
                "definitions", subroutines, "Should detect subroutine definitions"
            )
            definitions = subroutines["definitions"]
            self.assertGreater(
                len(definitions), 0, "Should have subroutine definitions"
            )

            # Should detect subroutine calls
            self.assertIn("calls", subroutines, "Should detect subroutine calls")
            calls = subroutines["calls"]
            self.assertGreater(len(calls), 0, "Should have subroutine calls")

    def test_program_flow_analysis(self):
        """Program flow and structure should be analyzed."""
        code = """G21 G90 (setup)
G0 Z10 (safe height)
M3 S1000 (spindle start)
G1 X10 Y10 Z-2 F100 (entry)
G1 X20 Y10 (cutting)
G1 X20 Y20
G1 X10 Y20
G1 X10 Y10 (close loop)
G0 Z10 (retract)
M5 (spindle stop)
M30 (end)"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        if "flow_analysis" in program_info:
            flow = program_info["flow_analysis"]

            # Should identify program phases
            phases = ["setup", "entry", "cutting", "exit"]
            for phase in phases:
                if phase in flow:
                    self.assertIn(
                        "start_line",
                        flow[phase],
                        f"Phase {phase} should have start line",
                    )
                    self.assertIn(
                        "end_line", flow[phase], f"Phase {phase} should have end line"
                    )

    def test_coordinate_system_setup_detection(self):
        """Coordinate system setup should be detected in program structure."""
        code = """G54 (work offset 1)
G17 (XY plane)
G21 (mm units)
G90 (absolute mode)
G94 (feed per minute)
G1 X10 Y10 F100"""
        result = parse_gcode(code)

        program_info = result.get("program_info", {})

        if "setup_commands" in program_info:
            setup = program_info["setup_commands"]

            # Should identify modal setup commands
            modal_setup = [
                "coordinate_system",
                "plane",
                "units",
                "distance_mode",
                "feed_mode",
            ]
            for setup_type in modal_setup:
                if setup_type in setup:
                    self.assertIn(
                        "command",
                        setup[setup_type],
                        f"Setup {setup_type} should have command",
                    )
                    self.assertIn(
                        "line_no",
                        setup[setup_type],
                        f"Setup {setup_type} should have line number",
                    )


if __name__ == "__main__":
    unittest.main()
